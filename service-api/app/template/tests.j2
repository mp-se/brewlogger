<script>
  var autoRefresh = false; // automatic refresh will also clear the console log....

  async function generateDeviceData() {
    console.log("Loading data to database using API.");

    data = {
      "chipId": "000001",
      "chipFamily": "esp32",
      "software": "software",
      "mdns": "000001",
      "config": "",
      "bleColor": "",
      "url": "" };
    await api.addDevice(data, function() { console.log("Data added"); });

    data = {
      "chipId": "000002",
      "chipFamily": "esp32",
      "software": "software",
      "mdns": "000002",
      "config": "",
      "bleColor": "",
      "url": "" };
    await api.addDevice(data, function() { console.log("Data added"); });

    data = {
      "chipId": "000003",
      "chipFamily": "esp32",
      "software": "software",
      "mdns": "000003",
      "config": "",
      "bleColor": "",
      "url": "" };
    await api.addDevice(data, function() { console.log("Data added"); if(autoRefresh) location.reload(); });
  }

  async function generateGravityData(cnt) {
    id = 0;

    await api.getBatchListByChipIdActive("000001", true, function(json, status) {
      console.log("Fetched list of batches");
      console.log(json);
      id = json[0].id;
    });

    console.log("Using batch id", id);

    dt = Date.parse("2023-10-10 01:00:0");
    dt = new Date(dt);

    for( i = 0; i < cnt; i++ ) {
      dt.setMinutes( dt.getMinutes() + 180);

      data = {
          "temperature": Math.random()*20,
          "gravity": Math.random()+1,
          "angle": 34.45,
          "battery": Math.random()*5,
          "rssi": -76.2,
          "corrGravity": 1.230,
          "runTime": 12,
          "batchId": id,
          "created": dt.toISOString(),
      }

     await api.addGravity(data, function() { console.log("Data posted"); });
    }

    if(autoRefresh) location.reload();
  }

  async function generatePressureData(cnt) {
    id = 0;

    await api.getBatchListByChipIdActive("000001", true, function(json, status) {
      console.log("Fetched list of batches");
      console.log(json);
      id = json[0].id;
    });

    console.log("Using batch id", id);

    dt = Date.parse("2023-10-10 01:00:0");
    dt = new Date(dt);

    for( i = 0; i < cnt; i++ ) {
      dt.setMinutes( dt.getMinutes() + 5);

      data = {
          "temperature": Math.random()*20,
          "pressure": Math.random()+1,
          "battery": Math.random()*5,
          "rssi": -76.2,
          "runTime": 12,
          "batchId": id,
          "created": dt.toISOString(),
      }

     await api.addPressure(data, function() { console.log("Data posted"); });
    }

    if(autoRefresh) location.reload();
  }

  function deleteDatabase() {
      api.deleteDatabase(function() { console.log("Data deleted"); if(autoRefresh) location.reload(); });
  }

  function migrateDatabase() {
      api.migrateDatabase(function() { console.log("Database migrated"); if(autoRefresh) location.reload(); });
  }

  async function generateBatches() {
    console.log("Loading data to database using API.");

    data = {
      "name": "Batch #1",
      "chipId": "000001",
      "description": "desc",
      "brewDate": "date",
      "style": "ipa",
      "brewer": "name",
      "brewfatherId": "",
      "active": true,
      "abv": 0.3,
      "ebc": 0.2,
      "ibu": 0.1 };
    await api.addBatch(data, function() { console.log("Data added"); });

    data = {
      "name": "Batch #2",
      "chipId": "000002",
      "description": "desc",
      "brewDate": "date",
      "style": "ipa",
      "brewer": "name",
      "brewfatherId": "",
      "active": false,
      "abv": 0.3,
      "ebc": 0.2,
      "ibu": 0.1 };
    await api.addBatch(data, function() { console.log("Data added"); });

    data = {
      "name": "Batch #3",
      "chipId": "000003",
      "description": "desc",
      "brewDate": "date",
      "style": "ipa",
      "brewer": "name",
      "brewfatherId": "",
      "active": false,
      "abv": 0.3,
      "ebc": 0.2,
      "ibu": 0.1 };
    await api.addBatch(data, function() { console.log("Data added"); if(autoRefresh) location.reload(); });
  }
</script>
